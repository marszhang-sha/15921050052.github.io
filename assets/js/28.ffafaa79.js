(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{203:function(e,n,s){e.exports=s.p+"assets/img/singletonthreadsafemultithreadedlazy.caf2798a.jpg"},204:function(e,n,s){e.exports=s.p+"assets/img/singletonthreadsafemultithreaded.52b7cb17.jpg"},205:function(e,n,s){e.exports=s.p+"assets/img/nonthreadsafe.c96c1332.jpg"},206:function(e,n,s){e.exports=s.p+"assets/img/singleto_singlethread1.748e843c.jpg"},207:function(e,n,s){e.exports=s.p+"assets/img/singleto_singlethread.ecbf798e.jpg"},208:function(e,n,s){e.exports=s.p+"assets/img/singletonmemory.85462543.jpg"},387:function(e,n,s){"use strict";s.r(n);var a=[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"what-is-singleton-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-singleton-pattern","aria-hidden":"true"}},[e._v("#")]),e._v(" What is singleton pattern?")]),e._v(" "),a("p",[e._v("The singleton pattern is the design of a class in such a way which restricts the creation of objects outside the class, but the same time comes up with a mean to render its instance when asked by the calling code. The same object is served for any requests.")]),e._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites","aria-hidden":"true"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("p",[e._v("A singleton class should have only one instance, not more than one instance is created.")]),e._v(" "),a("p",[e._v("This can be accomplished by setting all constructors to be private so that new instance can not be created outside the class (for eg LogManager log=new LogManager() is not possible)")]),e._v(" "),a("p",[e._v("A singleton class should provide a global point of access its instance.")]),e._v(" "),a("p",[e._v("This is possible by creating a public static method and this method should return the instance reference of the class. The calling code would be like LogManager logObj=LogManager.GetInstance(). Notice the client code is not using “new” keword instead it uses the public static method “GetInstance” of the class LogManager")]),e._v(" "),a("h2",{attrs:{id:"uses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uses","aria-hidden":"true"}},[e._v("#")]),e._v(" Uses")]),e._v(" "),a("p",[e._v("It saves memory because object is not created on each request because the calling code is not using the “new” keyword to create instance for this class.")]),e._v(" "),a("p",[e._v("It can be used in logging, caching, thread pools, configuration settings etc.")]),e._v(" "),a("h2",{attrs:{id:"different-versions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#different-versions","aria-hidden":"true"}},[e._v("#")]),e._v(" Different Versions")]),e._v(" "),a("p",[e._v("Many versions of single patterns are available, so choosing wisely based on your requirement is the key in implementing the singleton pattern. Typically the singleton class has only one instance. There could be any number of object references but only one instance of the class exists. The below diagram illustrates the basic idea of singleton")]),e._v(" "),a("p",[a("img",{attrs:{src:s(208),alt:"An image"}})]),e._v(" "),a("h2",{attrs:{id:"standard-single-threaded-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard-single-threaded-environment","aria-hidden":"true"}},[e._v("#")]),e._v(" Standard Single Threaded Environment:")]),e._v(" "),a("p",[e._v("In this context, the application or system is running on one thread and you are very sure that not more than one thread access the Singleton class")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Singleton\n{\n    private static Singleton instance;\n    private Singleton() { }\n    public static Singleton GetInstance()\n    {\n        if (instance == null)\n        {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("h2",{attrs:{id:"program-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#program-explanation","aria-hidden":"true"}},[e._v("#")]),e._v(" Program explanation")]),e._v(" "),a("p",[a("img",{attrs:{src:s(207),alt:"An image"}})]),e._v(" "),a("h2",{attrs:{id:"concept-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concept-explanation","aria-hidden":"true"}},[e._v("#")]),e._v(" Concept explanation")]),e._v(" "),a("p",[a("img",{attrs:{src:s(206),alt:"An image"}})]),e._v(" "),a("h2",{attrs:{id:"descriptive-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#descriptive-explanation","aria-hidden":"true"}},[e._v("#")]),e._v(" Descriptive explanation")]),e._v(" "),a("p",[a("strong",[e._v("Static member")]),e._v(":")]),e._v(" "),a("p",[e._v("It gets memory only once because of static and contains the instance of the Singleton class itself.")]),e._v(" "),a("p",[a("strong",[e._v("Private static:")])]),e._v(" "),a("p",[e._v("It should be initialized and used only inside of the class")]),e._v(" "),a("p",[a("strong",[e._v("Private constructor:")])]),e._v(" "),a("p",[e._v("It restricts the object creation from outside")]),e._v(" "),a("p",[a("strong",[e._v("Static factory method:")])]),e._v(" "),a("p",[e._v("It provides the global point of access to the Singleton object and returns the instance of the singleton class. When this method is called, it checks if an instance of the singleton class is available. If not available, it creates an instance. Otherwise, it returns the same already created object reference of the class.")]),e._v(" "),a("p",[a("strong",[e._v("Lazy instantiation:")])]),e._v(" "),a("p",[e._v("The object creation operation is deferred until the method is called first time by the calling code. This deferring approach is called lazy instantiation. It is generally used when improving performance, reducing database hits, optimized memory uses and minimizing the huge computation are primary considerations in designing or developing the systems")]),e._v(" "),a("h2",{attrs:{id:"disadvantages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disadvantages","aria-hidden":"true"}},[e._v("#")]),e._v(" Disadvantages")]),e._v(" "),a("p",[e._v("There are some trade-offs in this approach. As long as we are sure that there is only one thread accessing singleton object, then we don’t have any issue. The above approach is enough. But in multi-threaded environment, there is a possibility that more than one thread can access the same line of code. Here comes the problem.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(205),alt:"An image"}})]),e._v(" "),a("p",[e._v("It is not safe for multithreaded environments. If two threads enter “if condition” if (instance == null) at the same time, then two instances of Singleton will be created.")]),e._v(" "),a("h2",{attrs:{id:"multithreaded-environment-thread-safe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multithreaded-environment-thread-safe","aria-hidden":"true"}},[e._v("#")]),e._v(" Multithreaded Environment: Thread Safe")]),e._v(" "),a("p",[a("strong",[e._v("Approach 1:Early instance creation")])]),e._v(" "),a("p",[e._v("The keyword “readonly” enforces that the object can be initialized either at the declaration part or at the construction level. This makes possible the early instance creation. So When the class is first compiled and loaded into AppDomain, that time itself one copy of Singeton memory is created in heap memory because the Singleton instance is declared as “static” and assigned the object reference using new Singleton() in declaration itself.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(204),alt:"An image"}})]),e._v(" "),a("p",[a("strong",[e._v("Approach 2: Double checked locking, lazy initialization")])]),e._v(" "),a("p",[e._v("The keyword “lock” is the main player which holds lock on the code to block other threads to enter it the current thread finishes the execution and goes out of the locked block. In java, they call it as “synchronized ”. The keyword volatile ensures that assignment to the instance variable completes before the instance variable can be accessed. This is optional and it provides some extra assurance.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(203),alt:"An image"}})]),e._v(" "),a("h2",{attrs:{id:"real-time-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#real-time-example","aria-hidden":"true"}},[e._v("#")]),e._v(" Real time example")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('using System.IO;\n\nusing System.Text;\n\nnamespace Utility\n{\n    public class Logger\n    {\n        private FileStream fStream;\n        private StreamWriter sWriter;\n        private static readonly Logger _instance = new Logger();\n        public static Logger Instance\n        {\n            get\n            {\n                return _instance;\n            }\n        }\n        private Logger()\n        {\n            fStream = File.OpenWrite(@"c:\\logs\\log.txt");\n            sWriter = new StreamWriter(fStream);\n        }\n        public void LogMessage(string msg)\n        {\n            sWriter.WriteLine(msg + " logged at " + DateTime.UtcNow.ToString());\n            sWriter.Flush();\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string logMsg = "testing";\n            Console.WriteLine("log message :{0}", logMsg);\n            Logger.Instance.LogMessage(logMsg);\n            Console.WriteLine("Message logged successfully");\n            Console.ReadKey();\n        }\n    }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br")])]),a("h2",{attrs:{id:"multiton-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiton-pattern","aria-hidden":"true"}},[e._v("#")]),e._v(" Multiton Pattern")]),e._v(" "),a("p",[e._v('Multiton pattern is the extended and enhanced version of Singleton pattern. As the name of the patterns says, the Multiton pattern is nothing but a predefined "n" of collection of instances of the class, while Singleton class has only one instance.  The Multiton pattern(class) uses the Hash or Dictionary to group the list of instances. Each instance in the list is paired with respective key. By using key, the corresponding instance is returned to the calling code.')]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Utility\n{\n   public sealed class  BackendServer\n   {\n\n       private static readonly Dictionary<int, BackendServer> serverPool = \n       new Dictionary<int, BackendServer>\n       {\n           {1,new BackendServer() { ServerName="Server 1", IPAddress="121.121.121.121" } },\n           {2,new BackendServer() { ServerName="Server 2", IPAddress="121.125.129.122" } },\n           {3,new BackendServer() { ServerName="Server 3", IPAddress="121.131.121.123" } }\n       };\n       private static readonly object _lock = new object();\n       string ServerName { get; set; }\n       string IPAddress { get; set; }\n\n       public void Display()\n       {\n           Console.WriteLine("Request received by backend server{0}", ServerName);\n       }\n       private static readonly Random random = new Random();\n       private static readonly object randomLock = new object();\n       public static BackendServer GetAvailableBackendServer()\n       {\n           lock (randomLock)\n           {\n               int key = random.Next(1,(serverPool.Count+1));\n               return serverPool[key];\n           }\n           \n       }\n   }\n   class LoadBalancer\n   {\n       BackendServer ConnectToAvailableServer()\n       {\n           return BackendServer.GetAvailableBackendServer();\n       }\n       public void SericeRequest()\n       {\n           BackendServer instance=ConnectToAvailableServer();\n           instance.Display();\n       }\n   }\n\n   class ClientProgram\n   {\n       static void Main(string[] args)\n       {\n           LoadBalancer reqObj = new LoadBalancer();\n           for(int i=1;i<=10;i++)\n           reqObj.SericeRequest();\n           Console.ReadKey();\n       }\n   }\n\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br"),a("span",{staticClass:"line-number"},[e._v("47")]),a("br"),a("span",{staticClass:"line-number"},[e._v("48")]),a("br"),a("span",{staticClass:"line-number"},[e._v("49")]),a("br"),a("span",{staticClass:"line-number"},[e._v("50")]),a("br"),a("span",{staticClass:"line-number"},[e._v("51")]),a("br"),a("span",{staticClass:"line-number"},[e._v("52")]),a("br"),a("span",{staticClass:"line-number"},[e._v("53")]),a("br"),a("span",{staticClass:"line-number"},[e._v("54")]),a("br"),a("span",{staticClass:"line-number"},[e._v("55")]),a("br"),a("span",{staticClass:"line-number"},[e._v("56")]),a("br"),a("span",{staticClass:"line-number"},[e._v("57")]),a("br"),a("span",{staticClass:"line-number"},[e._v("58")]),a("br"),a("span",{staticClass:"line-number"},[e._v("59")]),a("br"),a("span",{staticClass:"line-number"},[e._v("60")]),a("br"),a("span",{staticClass:"line-number"},[e._v("61")]),a("br"),a("span",{staticClass:"line-number"},[e._v("62")]),a("br"),a("span",{staticClass:"line-number"},[e._v("63")]),a("br"),a("span",{staticClass:"line-number"},[e._v("64")]),a("br")])])])}],t=s(0),i=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},a,!1,null,null,null);i.options.__file="singletonAndMultiton.md";n.default=i.exports}}]);