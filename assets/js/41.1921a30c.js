(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{400:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"awk-cheat-sheet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#awk-cheat-sheet","aria-hidden":"true"}},[a._v("#")]),a._v(" Awk Cheat Sheet")]),a._v(" "),r("h2",{attrs:{id:"每行后面增加一行空行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#每行后面增加一行空行","aria-hidden":"true"}},[a._v("#")]),a._v(" 每行后面增加一行空行")]),a._v(" "),r("div",{staticClass:"language-bash line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),r("span",{attrs:{class:"token string"}},[a._v("'1;{print \"\"}'")]),a._v("   \n"),r("span",{attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),r("span",{attrs:{class:"token string"}},[a._v("'BEGIN{ORS=\"\\n\\n\"};1'")]),a._v(" \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("blockquote",[r("blockquote",[r("p",[a._v("每行后面增加一行空行。输出文件不会包含连续的两个或两个以上的空行"),r("br"),a._v("\n注意：在Unix系统， DOS行包括的 CRLF （\\r\\n） 通常会被作为非空行对待"),r("br"),a._v("\n因此 'NF' 将会返回TRUE。")])])]),a._v(" "),r("div",{staticClass:"language-bash line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),r("span",{attrs:{class:"token string"}},[a._v("'NF{print "),r("span",{attrs:{class:"token variable"}},[a._v("$0")]),a._v(' "\\n"}\'')]),a._v("   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h2",{attrs:{id:"每行后面增加两行空行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#每行后面增加两行空行","aria-hidden":"true"}},[a._v("#")]),a._v(" 每行后面增加两行空行")]),a._v(" "),r("div",{staticClass:"language-bash line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{attrs:{class:"token function"}},[a._v("awk")]),a._v(" '1"),r("span",{attrs:{class:"token punctuation"}},[a._v(";")]),r("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("print "),r("span",{attrs:{class:"token string"}},[a._v('"\\n"')]),r("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h2",{attrs:{id:"编号和计算："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编号和计算：","aria-hidden":"true"}},[a._v("#")]),a._v(" 编号和计算：")]),a._v(" "),r("h3",{attrs:{id:"以文件为单位，在每句行前加上编号-（左对齐）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以文件为单位，在每句行前加上编号-（左对齐）","aria-hidden":"true"}},[a._v("#")]),a._v(" 以文件为单位，在每句行前加上编号 （左对齐）")]),a._v(" "),r("p",[a._v("使用制表符 （\\t） 来代替空格可以有效保护页变的空白。")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{print FNR \"\\t\" $0}' files*   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"用制表符-（-t）-给所有文件加上连贯的编号。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用制表符-（-t）-给所有文件加上连贯的编号。","aria-hidden":"true"}},[a._v("#")]),a._v(" 用制表符 （\\t） 给所有文件加上连贯的编号。")]),a._v(" "),r("p",[a._v("awk '{print NR \"\\t\" $0}' files*")]),a._v(" "),r("p",[a._v("##3 以文件为单位，在每句行前加上编号 （编号在左，右对齐）"),r("br"),a._v("\n如果在DOS环境下，需要写两个'%'")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{printf(\"%5d : %s\\n\", NR,$0)}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"给非空白行的行加上编号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给非空白行的行加上编号","aria-hidden":"true"}},[a._v("#")]),a._v(" 给非空白行的行加上编号")]),a._v(" "),r("p",[a._v("记得Unix对于 \\r 的处理的特殊之处。（上面已经提到）")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('awk \'NF{$0=++a " :" $0};{print}\'   \nawk \'{print (NF? ++a " :" :"") $0}\'   \n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("h3",{attrs:{id:"计算行数-（模拟-wc-l-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算行数-（模拟-wc-l-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 计算行数 （模拟 "wc -l"）')]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk 'END{print NR}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"计算每行每个区域之和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算每行每个区域之和","aria-hidden":"true"}},[a._v("#")]),a._v(" 计算每行每个区域之和")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{s=0; for (i=1; i<=NF; i++) s=s+$i; print s}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"计算所有行所有区域的总和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算所有行所有区域的总和","aria-hidden":"true"}},[a._v("#")]),a._v(" 计算所有行所有区域的总和")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{for (i=1; i<=NF; i++) s=s+$i}; END{print s}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印每行每区域的绝对值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印每行每区域的绝对值","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印每行每区域的绝对值")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{for (i=1; i<=NF; i++) if ($i < 0) $i = -$i; print }'   \nawk '{for (i=1; i<=NF; i++) $i = ($i < 0) ? -$i : $i; print }'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("h3",{attrs:{id:"计算所有行所有区域（词）的个数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算所有行所有区域（词）的个数","aria-hidden":"true"}},[a._v("#")]),a._v(" 计算所有行所有区域（词）的个数")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{ total = total + NF }; END {print total}' file  \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印包含-beth-的行数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印包含-beth-的行数","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印包含 "Beth" 的行数')]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '/Beth/{n++}; END {print n+0}' file  \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印第一列最大的行-并且在行前打印出这个最大的数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印第一列最大的行-并且在行前打印出这个最大的数","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印第一列最大的行   并且在行前打印出这个最大的数")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '$1 > max {max=$1; maxline=$0}; END{ print max, maxline}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印每行的列数，并在后面跟上此行内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印每行的列数，并在后面跟上此行内容","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印每行的列数，并在后面跟上此行内容")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{ print NF \":\" $0 } '   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印每行的最后一列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印每行的最后一列","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印每行的最后一列")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{ print $NF }'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印最后一行的最后一列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印最后一行的最后一列","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印最后一行的最后一列")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '{ field = $NF }; END{ print field }'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印列数超过4的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印列数超过4的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印列数超过4的行")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk 'NF > 4'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"打印最后一列大于4的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印最后一列大于4的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印最后一列大于4的行")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk '$NF > 4'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("p",[a._v("##构建字符串：")]),a._v(" "),r("h3",{attrs:{id:"构建一指定长度的字符串（比如，513个空格）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建一指定长度的字符串（比如，513个空格）","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建一指定长度的字符串（比如，513个空格）")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("awk 'BEGIN{while (a++<513) s=s \" \"; print s}'   \n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"在某一位置中插入以特定长度的字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在某一位置中插入以特定长度的字符串","aria-hidden":"true"}},[a._v("#")]),a._v(" 在某一位置中插入以特定长度的字符串")]),a._v(" "),r("p",[a._v("例子：在每行第6列后插入49个空格")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('gawk --re-interval \'BEGIN{while(a++<49)s=s " "};{sub(/^.{6}/,"&" s)};1\'   \n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h2",{attrs:{id:"构建数组："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建数组：","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建数组：")]),a._v(" "),r("blockquote",[r("blockquote",[r("p",[a._v("以下两个部分并不是一句话脚本，但是这些技巧相当便捷所以也包括进来")])])]),a._v(" "),r("h3",{attrs:{id:"构建一个叫-month-的数组，以数字为索引，month-1-就是-jan-，month-2-就是-feb-，month-3-就是-mar-，以此类推。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建一个叫-month-的数组，以数字为索引，month-1-就是-jan-，month-2-就是-feb-，month-3-就是-mar-，以此类推。","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建一个叫\"month\"的数组，以数字为索引，month[1]就是'Jan'，month[2]就是   'Feb'，month[3]就是'Mar'，以此类推。")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec", month, " ")   \n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"构建一个叫-mdigit-的数组，以字符串为索引，mdigit-jan-等于-1，"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建一个叫-mdigit-的数组，以字符串为索引，mdigit-jan-等于-1，","aria-hidden":"true"}},[a._v("#")]),a._v(' 构建一个叫"mdigit"的数组，以字符串为索引，mdigit["Jan"] 等于 1，')]),a._v(" "),r("h1",{attrs:{id:"mdigit-feb-等于-2，等等。需要有-month-数组。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mdigit-feb-等于-2，等等。需要有-month-数组。","aria-hidden":"true"}},[a._v("#")]),a._v(' mdigit["Feb"] 等于 2，等等。需要有"month"数组。')]),a._v(" "),r("p",[a._v("for (i=1; i<=12; i++) m_digit[month[i]] = i")]),a._v(" "),r("h2",{attrs:{id:"文本转换和替代："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文本转换和替代：","aria-hidden":"true"}},[a._v("#")]),a._v(" 文本转换和替代：")]),a._v(" "),r("h3",{attrs:{id:"在unix环境：转换dos新行-（cr-lf）-为unix格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在unix环境：转换dos新行-（cr-lf）-为unix格式","aria-hidden":"true"}},[a._v("#")]),a._v(" 在Unix环境：转换DOS新行 （CR/LF） 为Unix格式")]),a._v(" "),r("p",[a._v("awk '{sub(/\\r$/,\"\")};1'   # 假设每行都以Ctrl-M结尾")]),a._v(" "),r("h3",{attrs:{id:"在unix环境：转换unix新行-（lf）-为dos格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在unix环境：转换unix新行-（lf）-为dos格式","aria-hidden":"true"}},[a._v("#")]),a._v(" 在Unix环境：转换Unix新行 （LF） 为DOS格式")]),a._v(" "),r("p",[a._v("awk '{sub(/$/,\"\\r\")};1'")]),a._v(" "),r("h1",{attrs:{id:"在dos环境：转换unix新行-（lf）-为dos格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在dos环境：转换unix新行-（lf）-为dos格式","aria-hidden":"true"}},[a._v("#")]),a._v(" 在DOS环境：转换Unix新行 （LF） 为DOS格式")]),a._v(" "),r("p",[a._v("awk 1")]),a._v(" "),r("h3",{attrs:{id:"在dos环境：转换dos新行-（cr-lf）-为unix格式-dos版本的awk不能运行-只能用gawk"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在dos环境：转换dos新行-（cr-lf）-为unix格式-dos版本的awk不能运行-只能用gawk","aria-hidden":"true"}},[a._v("#")]),a._v(" 在DOS环境：转换DOS新行 （CR/LF） 为Unix格式    DOS版本的awk不能运行, 只能用gawk:")]),a._v(" "),r("p",[a._v("gawk -v BINMODE=\"w\" '1' infile >outfile")]),a._v(" "),r("p",[a._v('###用 "tr" 替代的方法。'),r("br"),a._v("\ntr -d \\r <infile >outfile            # GNU tr 版本为 1.22 或者更高")]),a._v(" "),r("h3",{attrs:{id:"删除每行前的空白（包括空格符和制表符）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除每行前的空白（包括空格符和制表符）","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除每行前的空白（包括空格符和制表符）")]),a._v(" "),r("h1",{attrs:{id:"使所有文本左对齐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使所有文本左对齐","aria-hidden":"true"}},[a._v("#")]),a._v(" 使所有文本左对齐")]),a._v(" "),r("p",[a._v("awk '{sub(/^[ \\t]+/, \"\")};1'")]),a._v(" "),r("h3",{attrs:{id:"删除每行结尾的空白（包括空格符和制表符）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除每行结尾的空白（包括空格符和制表符）","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除每行结尾的空白（包括空格符和制表符）")]),a._v(" "),r("p",[a._v("awk '{sub(/[ \\t]+$/, \"\")};1'")]),a._v(" "),r("h3",{attrs:{id:"删除每行开头和结尾的所有空白（包括空格符和制表符）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除每行开头和结尾的所有空白（包括空格符和制表符）","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除每行开头和结尾的所有空白（包括空格符和制表符）")]),a._v(" "),r("p",[a._v("awk '{gsub(/^[ \\t]+|[ \\t]+$/,\"\")};1'"),r("br"),a._v("\nawk '{$1=$1};1'           # 每列之间的空白也被删除")]),a._v(" "),r("h3",{attrs:{id:"在每一行开头处插入5个空格-（做整页的左位移）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在每一行开头处插入5个空格-（做整页的左位移）","aria-hidden":"true"}},[a._v("#")]),a._v(" 在每一行开头处插入5个空格 （做整页的左位移）")]),a._v(" "),r("p",[a._v("awk '{sub(/^/, \"     \")};1'")]),a._v(" "),r("h3",{attrs:{id:"用79个字符为宽度，将全部文本右对齐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用79个字符为宽度，将全部文本右对齐","aria-hidden":"true"}},[a._v("#")]),a._v(" 用79个字符为宽度，将全部文本右对齐")]),a._v(" "),r("p",[a._v("awk '{printf \"%79s\\n\", $0}' file*")]),a._v(" "),r("h3",{attrs:{id:"用79个字符为宽度，将全部文本居中对齐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用79个字符为宽度，将全部文本居中对齐","aria-hidden":"true"}},[a._v("#")]),a._v(" 用79个字符为宽度，将全部文本居中对齐")]),a._v(" "),r("p",[a._v('awk \'{l=length();s=int((79-l)/2); printf "%"(s+l)"s\\n",$0}\' file*')]),a._v(" "),r("h3",{attrs:{id:"每行用-bar-查找替换-foo"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#每行用-bar-查找替换-foo","aria-hidden":"true"}},[a._v("#")]),a._v(' 每行用 "bar" 查找替换 "foo"')]),a._v(" "),r("p",[a._v('awk \'{sub(/foo/,"bar")}; 1\'           # 仅仅替换第一个找到的"foo"'),r("br"),a._v('\ngawk \'{$0=gensub(/foo/,"bar",4)}; 1\'  # 仅仅替换第四个找到的"foo"'),r("br"),a._v("\nawk '{gsub(/foo/,\"bar\")}; 1'          # 全部替换")]),a._v(" "),r("h3",{attrs:{id:"在包含-baz-的行里，将-foo-替换为-bar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在包含-baz-的行里，将-foo-替换为-bar","aria-hidden":"true"}},[a._v("#")]),a._v(' 在包含 "baz" 的行里，将 "foo" 替换为 "bar"')]),a._v(" "),r("p",[a._v("awk '/baz/{gsub(/foo/, \"bar\")}; 1'")]),a._v(" "),r("h3",{attrs:{id:"在不包含-baz-的行里，将-foo-替换为-bar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在不包含-baz-的行里，将-foo-替换为-bar","aria-hidden":"true"}},[a._v("#")]),a._v(' 在不包含 "baz" 的行里，将 "foo" 替换为 "bar"')]),a._v(" "),r("p",[a._v("awk '!/baz/{gsub(/foo/, \"bar\")}; 1'")]),a._v(" "),r("h3",{attrs:{id:"将-scarlet-或者-ruby-或者-puce-替换为-red"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#将-scarlet-或者-ruby-或者-puce-替换为-red","aria-hidden":"true"}},[a._v("#")]),a._v(' 将 "scarlet" 或者 "ruby" 或者 "puce" 替换为 "red"')]),a._v(" "),r("p",[a._v("awk '{gsub(/scarlet|ruby|puce/, \"red\")}; 1'")]),a._v(" "),r("h3",{attrs:{id:"倒排文本-（模拟-tac-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#倒排文本-（模拟-tac-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 倒排文本 （模拟 "tac"）')]),a._v(" "),r("p",[a._v("awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' file*")]),a._v(" "),r("h3",{attrs:{id:"如果一行结尾为反斜线符，将下一行接到这行后面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如果一行结尾为反斜线符，将下一行接到这行后面","aria-hidden":"true"}},[a._v("#")]),a._v(" 如果一行结尾为反斜线符，将下一行接到这行后面")]),a._v(" "),r("h1",{attrs:{id:"（如果有连续多行后面带反斜线符，将会失败）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#（如果有连续多行后面带反斜线符，将会失败）","aria-hidden":"true"}},[a._v("#")]),a._v(" （如果有连续多行后面带反斜线符，将会失败）")]),a._v(" "),r("p",[a._v("awk '/\\/ {sub(/\\\\/,\"\"); getline t; print $0 t; next}; 1' file*")]),a._v(" "),r("h3",{attrs:{id:"排序并打印所有登录用户的姓名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#排序并打印所有登录用户的姓名","aria-hidden":"true"}},[a._v("#")]),a._v(" 排序并打印所有登录用户的姓名")]),a._v(" "),r("p",[a._v('awk -F ":" \'{ print $1 | "sort" }\' /etc/passwd')]),a._v(" "),r("h3",{attrs:{id:"以相反的顺序打印出每行的前两列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以相反的顺序打印出每行的前两列","aria-hidden":"true"}},[a._v("#")]),a._v(" 以相反的顺序打印出每行的前两列")]),a._v(" "),r("p",[a._v("awk '{print $2, $1}' file")]),a._v(" "),r("h3",{attrs:{id:"调换前两列的位置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调换前两列的位置","aria-hidden":"true"}},[a._v("#")]),a._v(" 调换前两列的位置")]),a._v(" "),r("p",[a._v("awk '{temp = $1; $1 = $2; $2 = temp}' file")]),a._v(" "),r("h3",{attrs:{id:"打印每行，并删除第二列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印每行，并删除第二列","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印每行，并删除第二列")]),a._v(" "),r("p",[a._v("awk '{ $2 = \"\"; print }'")]),a._v(" "),r("h3",{attrs:{id:"倒置每行并打印"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#倒置每行并打印","aria-hidden":"true"}},[a._v("#")]),a._v(" 倒置每行并打印")]),a._v(" "),r("p",[a._v('awk \'{for (i=NF; i>0; i--) printf("%s ",i);printf ("\\n")}\' file')]),a._v(" "),r("h3",{attrs:{id:"用逗号链接每5行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用逗号链接每5行","aria-hidden":"true"}},[a._v("#")]),a._v(" 用逗号链接每5行")]),a._v(" "),r("p",[a._v('awk \'ORS=NR%5?",":"\\n"\' file')]),a._v(" "),r("h2",{attrs:{id:"择性的打印某些行："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#择性的打印某些行：","aria-hidden":"true"}},[a._v("#")]),a._v(" 择性的打印某些行：")]),a._v(" "),r("h3",{attrs:{id:"打印文件的前十行-（模拟-head-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印文件的前十行-（模拟-head-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印文件的前十行 （模拟 "head"）')]),a._v(" "),r("p",[a._v("awk 'NR < 11'")]),a._v(" "),r("h3",{attrs:{id:"打印文件的第一行-（模拟-head-1-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印文件的第一行-（模拟-head-1-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印文件的第一行 （模拟 "head -1"）')]),a._v(" "),r("p",[a._v("awk 'NR>1{exit};1'")]),a._v(" "),r("h3",{attrs:{id:"打印文件的最后两行-（模拟-tail-2-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印文件的最后两行-（模拟-tail-2-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印文件的最后两行 （模拟 "tail -2"）')]),a._v(" "),r("p",[a._v("awk '{y=x \"\\n\" $0; x=$0};END{print y}'")]),a._v(" "),r("h3",{attrs:{id:"打印文件的最后一行-（模拟-tail-1-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印文件的最后一行-（模拟-tail-1-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印文件的最后一行 （模拟 "tail -1"）')]),a._v(" "),r("p",[a._v("awk 'END{print}'")]),a._v(" "),r("p",[a._v('###打印匹配正则表达式的行 （模拟 "grep"）'),r("br"),a._v("\nawk '/regex/'")]),a._v(" "),r("h3",{attrs:{id:"打印不匹配正则表达式的行-（模拟-grep-v-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印不匹配正则表达式的行-（模拟-grep-v-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印不匹配正则表达式的行 （模拟 "grep -v"）')]),a._v(" "),r("p",[a._v("awk '!/regex/'")]),a._v(" "),r("h3",{attrs:{id:"打印第5列等于-abc123-的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印第5列等于-abc123-的行","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印第5列等于"abc123"的行')]),a._v(" "),r("p",[a._v("awk '$5 == \"abc123\"'")]),a._v(" "),r("h3",{attrs:{id:"打印第5列不等于-abc123-的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印第5列不等于-abc123-的行","aria-hidden":"true"}},[a._v("#")]),a._v(' 打印第5列不等于"abc123"的行')]),a._v(" "),r("h1",{attrs:{id:"这个同样可以用于打印少于5列的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#这个同样可以用于打印少于5列的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 这个同样可以用于打印少于5列的行")]),a._v(" "),r("p",[a._v("awk '$5 != \"abc123\"'"),r("br"),a._v("\nawk '!($5 == \"abc123\")'")]),a._v(" "),r("h3",{attrs:{id:"用正则匹配某一列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用正则匹配某一列","aria-hidden":"true"}},[a._v("#")]),a._v(" 用正则匹配某一列")]),a._v(" "),r("p",[a._v("awk '$7  ~ /^[a-f]/'    # 打印第7列匹配的行"),r("br"),a._v("\nawk '$7 !~ /^[a-f]/'    # 打印第7列不匹配的行")]),a._v(" "),r("h3",{attrs:{id:"打印匹配正则表达式的前一行，但是不打印当前行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印匹配正则表达式的前一行，但是不打印当前行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印匹配正则表达式的前一行，但是不打印当前行")]),a._v(" "),r("p",[a._v("awk '/regex/{print x};{x=$0}'"),r("br"),a._v('\nawk \'/regex/{print (x=="" ? "match on line 1" : x)};{x=$0}\'')]),a._v(" "),r("h3",{attrs:{id:"打印匹配正则表达式的后一行，但是不打印当前行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印匹配正则表达式的后一行，但是不打印当前行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印匹配正则表达式的后一行，但是不打印当前行")]),a._v(" "),r("p",[a._v("awk '/regex/{getline;print}'")]),a._v(" "),r("h3",{attrs:{id:"以任何顺序查找包含-aaa、bbb-和-ccc-的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以任何顺序查找包含-aaa、bbb-和-ccc-的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 以任何顺序查找包含 AAA、BBB 和 CCC 的行")]),a._v(" "),r("p",[a._v("awk '/AAA/; /BBB/; /CCC/'")]),a._v(" "),r("h3",{attrs:{id:"以指定顺序查找包含-aaa、bbb-和-ccc-的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以指定顺序查找包含-aaa、bbb-和-ccc-的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 以指定顺序查找包含 AAA、BBB 和 CCC 的行")]),a._v(" "),r("p",[a._v("awk '/AAA.*BBB.*CCC/'")]),a._v(" "),r("h3",{attrs:{id:"打印长度大于64个字节的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印长度大于64个字节的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印长度大于64个字节的行")]),a._v(" "),r("p",[a._v("awk 'length > 64'")]),a._v(" "),r("h3",{attrs:{id:"打印长度小于64个字节的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印长度小于64个字节的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印长度小于64个字节的行")]),a._v(" "),r("p",[a._v("awk 'length < 64'")]),a._v(" "),r("h3",{attrs:{id:"打印从匹配正则起到文件末尾的内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印从匹配正则起到文件末尾的内容","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印从匹配正则起到文件末尾的内容")]),a._v(" "),r("p",[a._v("awk '/regex/,0'"),r("br"),a._v("\nawk '/regex/,EOF'")]),a._v(" "),r("h3",{attrs:{id:"打印指定行之间的内容-（8-12行-包括第8和第12行）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印指定行之间的内容-（8-12行-包括第8和第12行）","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印指定行之间的内容 （8-12行, 包括第8和第12行）")]),a._v(" "),r("p",[a._v("awk 'NR==8,NR==12'")]),a._v(" "),r("h3",{attrs:{id:"打印第52行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印第52行","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印第52行")]),a._v(" "),r("p",[a._v("awk 'NR==52'"),r("br"),a._v("\nawk 'NR==52 {print;exit}'          # 对于大文件更有效率")]),a._v(" "),r("h3",{attrs:{id:"打印两个正则匹配间的内容-（包括正则的内容）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打印两个正则匹配间的内容-（包括正则的内容）","aria-hidden":"true"}},[a._v("#")]),a._v(" 打印两个正则匹配间的内容 （包括正则的内容）")]),a._v(" "),r("p",[a._v("awk '/Iowa/,/Montana/'             # 大小写敏感")]),a._v(" "),r("h2",{attrs:{id:"选择性的删除某些行："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择性的删除某些行：","aria-hidden":"true"}},[a._v("#")]),a._v(" 选择性的删除某些行：")]),a._v(" "),r("h3",{attrs:{id:"删除所有空白行-（类似于-grep-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除所有空白行-（类似于-grep-）","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除所有空白行 （类似于 \"grep '.' \"）")]),a._v(" "),r("p",[a._v("awk NF"),r("br"),a._v("\nawk '/./'")]),a._v(" "),r("h3",{attrs:{id:"删除重复连续的行-（模拟-uniq-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除重复连续的行-（模拟-uniq-）","aria-hidden":"true"}},[a._v("#")]),a._v(' 删除重复连续的行 （模拟 "uniq"）')]),a._v(" "),r("p",[a._v("awk 'a !~ $0; {a=$0}'")]),a._v(" "),r("h3",{attrs:{id:"删除重复的、非连续的行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除重复的、非连续的行","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除重复的、非连续的行")]),a._v(" "),r("p",[a._v("awk '! a[$0]++'                     # 最简练"),r("br"),a._v("\nawk '!($0 in a) {a[$0];print}'      # 最有效")]),a._v(" "),r("h3",{attrs:{id:"提取日志中的手机号并且统计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提取日志中的手机号并且统计","aria-hidden":"true"}},[a._v("#")]),a._v(" 提取日志中的手机号并且统计")]),a._v(" "),r("p",[a._v("awk -F \"&\" '/userCode=/{print substr($4,10,21)}' localhost_access_log.2020-06-*.txt |sort | uniq -c  > mobile.txt")]),a._v(" "),r("h2",{attrs:{id:"command-reference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#command-reference","aria-hidden":"true"}},[a._v("#")]),a._v(" Command Reference")]),a._v(" "),r("h3",{attrs:{id:"basics-i"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#basics-i","aria-hidden":"true"}},[a._v("#")]),a._v(" Basics I")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("$1")]),a._v(" "),r("td",[a._v("Reference first column")])]),a._v(" "),r("tr",[r("td",[a._v("awk '/pattern/ {action}' file")]),a._v(" "),r("td",[a._v("Execute action for matched pattern 'pattern' on file 'file'")])]),a._v(" "),r("tr",[r("td",[a._v(";")]),a._v(" "),r("td",[a._v("Char to separate two actions")])]),a._v(" "),r("tr",[r("td",[a._v("print")]),a._v(" "),r("td",[a._v("Print current record line")])]),a._v(" "),r("tr",[r("td",[a._v("$0")]),a._v(" "),r("td",[a._v("Reference current record line")])])])]),a._v(" "),r("h3",{attrs:{id:"variables-i"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#variables-i","aria-hidden":"true"}},[a._v("#")]),a._v(" Variables I")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("$2")]),a._v(" "),r("td",[a._v("Reference second column")])]),a._v(" "),r("tr",[r("td",[a._v("FS")]),a._v(" "),r("td",[a._v("Field separator of input file (default whitespace)")])]),a._v(" "),r("tr",[r("td",[a._v("NF")]),a._v(" "),r("td",[a._v("Number of fields in current record")])]),a._v(" "),r("tr",[r("td",[a._v("NR")]),a._v(" "),r("td",[a._v("Line number of the current record")])])])]),a._v(" "),r("h3",{attrs:{id:"basics-ii"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#basics-ii","aria-hidden":"true"}},[a._v("#")]),a._v(" Basics II")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("^")]),a._v(" "),r("td",[a._v("Match beginning of field")])]),a._v(" "),r("tr",[r("td",[a._v("~")]),a._v(" "),r("td",[a._v("Match opterator")])]),a._v(" "),r("tr",[r("td",[a._v("!~")]),a._v(" "),r("td",[a._v("Do not match operator")])]),a._v(" "),r("tr",[r("td",[a._v("-F")]),a._v(" "),r("td",[a._v("Command line option to specify input field delimiter")])]),a._v(" "),r("tr",[r("td",[a._v("BEGIN")]),a._v(" "),r("td",[a._v("Denotes block executed once at start")])]),a._v(" "),r("tr",[r("td",[a._v("END")]),a._v(" "),r("td",[a._v("Denotes block executed once at end")])]),a._v(" "),r("tr",[r("td",[a._v("str1 str2")]),a._v(" "),r("td",[a._v("Concat str1 and str2")])])])]),a._v(" "),r("h3",{attrs:{id:"one-line-exercises-i"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#one-line-exercises-i","aria-hidden":"true"}},[a._v("#")]),a._v(" One-Line Exercises I")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("awk '{print $1}' file")]),a._v(" "),r("td",[a._v("Print first field for each record in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk '/regex/' file")]),a._v(" "),r("td",[a._v("Print only lines that match regex in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk '!/regex/' file")]),a._v(" "),r("td",[a._v("Print only lines that do not match regex in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk '$2 == \"foo\"' file")]),a._v(" "),r("td",[a._v('Print any line where field 2 is equal to "foo" in file')])]),a._v(" "),r("tr",[r("td",[a._v("awk '$2 != \"foo\"' file")]),a._v(" "),r("td",[a._v('Print lines where field 2 is NOT equal to "foo" in file')])]),a._v(" "),r("tr",[r("td",[a._v("awk '$1 ~ /regex/' file")]),a._v(" "),r("td",[a._v("Print line if field 1 matches regex in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk '$1 !~ /regex/' file")]),a._v(" "),r("td",[a._v("Print line if field 1 does NOT match regex in file")])])])]),a._v(" "),r("h3",{attrs:{id:"variables-ii"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#variables-ii","aria-hidden":"true"}},[a._v("#")]),a._v(" Variables II")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("FILENAME")]),a._v(" "),r("td",[a._v("Reference current input file")])]),a._v(" "),r("tr",[r("td",[a._v("FNR")]),a._v(" "),r("td",[a._v("Reference number of the current record relative to current input file")])]),a._v(" "),r("tr",[r("td",[a._v("OFS")]),a._v(" "),r("td",[a._v("Field separator of the outputted data (default whitespace)")])]),a._v(" "),r("tr",[r("td",[a._v("ORS")]),a._v(" "),r("td",[a._v("Record separator of the outputted data (default newline)")])]),a._v(" "),r("tr",[r("td",[a._v("RS")]),a._v(" "),r("td",[a._v("Record separator of input file (default newline)")])])])]),a._v(" "),r("h3",{attrs:{id:"variables-iii"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#variables-iii","aria-hidden":"true"}},[a._v("#")]),a._v(" Variables III")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("CONVFMT")]),a._v(" "),r("td",[a._v("Conversion format used when converting numbers (default %.6g)")])]),a._v(" "),r("tr",[r("td",[a._v("SUBSEP")]),a._v(" "),r("td",[a._v("Separates multiple subscripts (default 034)")])]),a._v(" "),r("tr",[r("td",[a._v("OFMT")]),a._v(" "),r("td",[a._v("Output format for numbers (default %.6g)")])]),a._v(" "),r("tr",[r("td",[a._v("ARGC")]),a._v(" "),r("td",[a._v("Argument count, assignable")])]),a._v(" "),r("tr",[r("td",[a._v("ARGV")]),a._v(" "),r("td",[a._v("Argument array, assignable")])]),a._v(" "),r("tr",[r("td",[a._v("ENVIRON")]),a._v(" "),r("td",[a._v("Array of environment variables")])])])]),a._v(" "),r("h3",{attrs:{id:"functions-i"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#functions-i","aria-hidden":"true"}},[a._v("#")]),a._v(" Functions I")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("index(s,t)")]),a._v(" "),r("td",[a._v("Position in string s where string t occurs, 0 if not found")])]),a._v(" "),r("tr",[r("td",[a._v("length(s)")]),a._v(" "),r("td",[a._v("Length of string s (or $0 if no arg)")])]),a._v(" "),r("tr",[r("td",[a._v("rand")]),a._v(" "),r("td",[a._v("Random number between 0 and 1")])]),a._v(" "),r("tr",[r("td",[a._v("substr(s,index,len)")]),a._v(" "),r("td",[a._v("Return len-char substring of s that begins at index (counted from 1)")])]),a._v(" "),r("tr",[r("td",[a._v("srand")]),a._v(" "),r("td",[a._v("Set seed for rand and return previous seed")])]),a._v(" "),r("tr",[r("td",[a._v("int(x)")]),a._v(" "),r("td",[a._v("Truncate x to integer value")])])])]),a._v(" "),r("h3",{attrs:{id:"functions-ii"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#functions-ii","aria-hidden":"true"}},[a._v("#")]),a._v(" Functions II")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("split(s,a,fs)")]),a._v(" "),r("td",[a._v("Split string s into array a split by fs, returning length of a")])]),a._v(" "),r("tr",[r("td",[a._v("match(s,r)")]),a._v(" "),r("td",[a._v("Position in string s where regex r occurs, or 0 if not found")])]),a._v(" "),r("tr",[r("td",[a._v("sub(r,t,s)")]),a._v(" "),r("td",[a._v("Substitute t for first occurrence of regex r in string s (or $0 if s not given)")])]),a._v(" "),r("tr",[r("td",[a._v("gsub(r,t,s)")]),a._v(" "),r("td",[a._v("Substitute t for all occurrences of regex r in string s")])])])]),a._v(" "),r("h3",{attrs:{id:"functions-iii"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#functions-iii","aria-hidden":"true"}},[a._v("#")]),a._v(" Functions III")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("args")]),a._v(" "),r("th",[a._v("description")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("awk 'NR!=1{print $1}' file")]),a._v(" "),r("td",[a._v("Print first field for each record in file excluding the first record")])]),a._v(" "),r("tr",[r("td",[a._v("awk 'END{print NR}' file")]),a._v(" "),r("td",[a._v("Count lines in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk '/foo/{n++}; END {print n+0}' file")]),a._v(" "),r("td",[a._v("Print total number of lines that contain foo")])]),a._v(" "),r("tr",[r("td",[a._v("awk '{total=total+NF};END{print total}' file")]),a._v(" "),r("td",[a._v("Print total number of fields in all lines")])]),a._v(" "),r("tr",[r("td",[a._v("awk '/regex/{getline;print}' file")]),a._v(" "),r("td",[a._v("Print line immediately after regex, but not line containing regex in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk 'length > 32' file")]),a._v(" "),r("td",[a._v("Print lines with more than 32 characters in file")])]),a._v(" "),r("tr",[r("td",[a._v("awk 'NR==12' file")]),a._v(" "),r("td",[a._v("Print line number 12 of file")])])])])])}],!1,null,null,null);s.options.__file="awk.md";t.default=s.exports}}]);